## MMU config file
## Designed to be used with the "HappyHare" (HH) software backend by moggieuk: https://github.com/moggieuk/Happy-Hare

[gcode_macro _USER_VARIABLES]
variable_klippain_mmu_enabled: True
gcode:

[extruder]
max_extrude_only_distance: 200
max_extrude_cross_section: 50.0


# Custom macros to raise an error during the START_PRINT and stop it in case of an MMU error
[gcode_macro _MMU_ERROR_CHECK1]
description: script to stop start_print if mmu error is detected
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}

    {% if printer.mmu.print_state|string == "pause_locked" %}
        {action_raise_error("MMU is locked! please check and use RESUME to unlock MMU then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
        {% elif printer.mmu.is_locked %}          # will be depreciated
        {action_raise_error("MMU is locked! please check and use RESUME to unlock MMU then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif verbose %}
        {% if printer.mmu.tool|int == -1 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="warning"--text> No tool selected! </span>"
        {% elif printer.mmu.tool|int == -2 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="success"--text> Bypass selected</span>"
        {% else %}
            RESPOND PREFIX='mmu tool:' MSG="<span class="success"--text> Preload T{printer.mmu.tool} OK</span>"
        {% endif %}
    {% endif %}

[gcode_macro _MMU_ERROR_CHECK2]
description: second script to stop start_print if mmu error is detected
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}
    
    {% if printer.mmu.print_state|string == "pause_locked" %}
        {action_raise_error("MMU is locked! please check and use RESUME to unlock MMU then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif printer.mmu.is_locked %}          # will be depreciated
        {action_raise_error("MMU is locked! please check and use RESUME to unlock MMU then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif printer.mmu.filament != "Loaded" %}
       {action_raise_error("Filament is not loaded! Check then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif printer.mmu.tool|int != -2 and printer.mmu.tool|int != INITIAL_TOOL %}
        {action_raise_error("Initial tool ({INITIAL_TOOL}) and MMU tool ({printer.mmu.tool}) are different!!! Check then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif verbose %}
        {% if printer.mmu.tool|int == -1 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="warning"--text> something get wrong! No tool active! </span>"
        {% elif printer.mmu.tool|int == -2 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="success"--text> Bypass selected and loaded</span>"
        {% else %}
            RESPOND PREFIX='mmu tool:' MSG="<span class="success"--text> T{printer.mmu.tool} ready</span>"
        {% endif %}
    {% endif %}

# Also include directly the MMU macros and config from here
[include ../../macros/hardware_functions/mmu.cfg]
